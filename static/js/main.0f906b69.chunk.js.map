{"version":3,"sources":["logo.svg","components/Contactform.js","firebase.js","components/Contacts.js","App.js","reportWebVitals.js","index.js"],"names":["Contactsform","props","initialfieldvalues","fullname","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","class","placeholder","onChange","style","margin","type","fireDb","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","database","ref","Contacts","setContactObjects","setCurrentId","firebaseDb","child","on","snapshot","val","obj","push","err","console","log","set","Object","keys","map","id","fullName","onClick","key","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f906b69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst Contactsform = (props) => {\n    const initialfieldvalues = {\n        fullname: '',\n        mobile: '',\n        email: '',\n        address: ''\n    }\n\n    var [values, setValues] = useState(initialfieldvalues)\n\n    useEffect(() => {\n        if (props.currentId == '')\n            setValues({\n                ...initialfieldvalues\n            })\n        else\n            setValues({\n                ...props.contactObjects[props.currentId]\n            })\n    }, [props.currentId, props.contactObjects])\n\n    const handleInputChange = e => {\n        var { name, value } = e.target\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n\n    const handleFormSubmit = e => {\n        e.preventDefault();\n        props.addOrEdit(values);\n    }\n\n    return (\n        <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n            <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                    <div className=\"input-group-text\">\n                        <i class=\"fas fa-user\"></i>\n                    </div>\n                </div>\n                <input className=\"form-control\" placeholder=\"Full Name\" name=\"fullname\"\n                    value={values.fullname}\n                    onChange={handleInputChange}\n                />\n            </div>\n            <div className=\"row\" style={{margin:\"20px\"}}>\n                <div className=\"from-group  input-group col-md-6\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-text\">\n                            <i class=\"fas fa-phone\"></i>\n                        </div>\n                    </div>\n                    <input className=\"form-control\" placeholder=\"Mobile\" name=\"mobile\"\n                        value={values.mobile}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className=\"from-group input-group col-md-6\">\n                    <div className=\"input-group-prepend\">\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text\">\n                                <i class=\"fas fa-envelope-open\"></i>\n                            </div>\n                        </div>\n                        <input className=\"form-control\" placeholder=\"Email\" name=\"email\"\n                            value={values.email}\n                            onChange={handleInputChange}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"form-group\">\n                <textarea className=\"form-control\" placeholder=\"Address\" name=\"address\"\n                    value={values.address}\n                    onChange={handleInputChange}\n                />\n            </div>\n            <div className=\"form-group\">\n                <input type='submit' value={props.currentId == '' ? \"Save\" : \"Update\"} className=\"btn btn-primary btn-block\" />\n            </div>\n        </form>\n    );\n}\n\nexport default Contactsform;","import firebase from \"firebase\";\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDEstKXJ9jpF2W8WSUS4UY3vQbEgSrVUa8\",\n  authDomain: \"react-crud-a802e.firebaseapp.com\",\n  projectId: \"react-crud-a802e\",\n  storageBucket: \"react-crud-a802e.appspot.com\",\n  messagingSenderId: \"1052339682330\",\n  appId: \"1:1052339682330:web:55d5d0ce8fbcb0ea2da5a3\"\n};\n// Initialize Firebase\nvar fireDb = firebase.initializeApp(firebaseConfig);\n\nexport default fireDb.database().ref();","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Contactsform from \"./Contactform\"\nimport firebaseDb from \"../firebase\";\n\nconst Contacts = () => {\n\n    var [contactObjects, setContactObjects] = useState({})\n    var [currentId, setCurrentId] = useState('')\n\n    useEffect(() => {\n        firebaseDb.child('contacts').on('value', snapshot => {\n            if (snapshot.val() != null)\n                setContactObjects({\n                    ...snapshot.val()\n                })\n            else\n                setContactObjects({})\n        })\n    }, [])\n\n    const addOrEdit = obj => {\n        if (currentId == '')\n            firebaseDb.child('contacts').push(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                }\n            )\n        else\n            firebaseDb.child(`contacts/${currentId}`).set(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n    }\n\n    const onDelete = key => {\n        if (window.confirm('Are you sure to delete this record?')) {\n            firebaseDb.child(`contacts/${key}`).remove(\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        }\n    }\n\n    return (\n        <>\n            <div class=\"jumbotron jumbotron-fluid\">\n                <div class=\"container\">\n                    <h1 class=\"display-4 text-center\">Contact Register</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <Contactsform {...({ addOrEdit, currentId, contactObjects })} />\n                </div>\n                <div className='col-md-8'>\n                    <table className=\"table table-borderless table-stripped\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Full Name</th>\n                                <th>Mobile</th>\n                                <th>Email</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                Object.keys(contactObjects).map(id => {\n                                    return <tr key={id}>\n                                        <td>{contactObjects[id].fullName}</td>\n                                        <td>{contactObjects[id].mobile}</td>\n                                        <td>{contactObjects[id].email}</td>\n                                        <td>\n                                            <a className=\"btn text-primary\" onClick={() => { setCurrentId(id) }}>\n                                                <i class=\"fas fa-pencil-alt\"></i>\n                                            </a>\n                                            <a className=\"btn text-danger\" onClick={() => { onDelete(id) }}>\n                                                <i className=\"fas fa-trash-alt\"></i>\n                                            </a>\n                                        </td>\n                                    </tr>\n                                })\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Contacts;","import logo from './logo.svg';\nimport './App.css';\nimport Contacts from './components/Contacts';\nimport { AssignmentModel } from './components/ClassModel/AssignmentModel';\nimport { useState } from 'react';\n\nfunction App() {\n  const [show, SetShow] = useState(false);\n  const closeModalHandler = () => SetShow(false);\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-md-10 offset-md-1\">\n          <Contacts />\n        </div>\n      </div>\n\n\n\n      {/* <div>\n        {show ? <div onClick={closeModalHandler} className=\"back-drop\"></div> : null}\n        <button onClick={() => SetShow(true)} className=\"btn-openModal\">Open Model</button>\n        <AssignmentModel show={show} close={closeModalHandler} />\n      </div> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}